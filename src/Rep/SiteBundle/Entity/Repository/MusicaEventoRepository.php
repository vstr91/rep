<?php

namespace Rep\SiteBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MusicaEventoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MusicaEventoRepository extends EntityRepository
{
    
    function listaMusicasAtivasAusentesNoEvento($id_evento, $id_projeto){
//        $qb = $this->createQueryBuilder('me');
//        
//        $musicasEvento = $qb->select('IDENTITY(me.musica)')
//          ->leftJoin("RepSiteBundle:Evento", 'e', 'WITH', 'e.id = me.evento')
//          ->where("me.evento = '".$id_evento."'")
//          ->andWhere('me.status = 0')
//          //->andWhere("e.projeto = :projeto")
//          //      ->setParameter('projeto', "'".$id_projeto."'")
//          ->getQuery()
//          ->getResult();
//        
//        if(sizeof($musicasEvento) > 0){
//            $result = $qb->select('m1')
//            ->distinct()
//            ->from("RepSiteBundle:Musica", "m1")
//                    ->innerJoin('RepSiteBundle:MusicaProjeto', 'mp', 'WITH', 'mp.musica = m1.id')
//            ->where('m1.id NOT IN (:musicasEvento)')
//                    //->andWhere('m1.status = 0')
//                    ->andWhere('mp.projeto = :projeto')
//                    ->setParameter('musicasEvento', $musicasEvento)
//                    ->setParameter('projeto', "'".$id_projeto."'")
//                    ->addOrderBy('m1.nome')
//            ->getQuery()
//            ->getResult();
//        } else{
////            $qb = $this->createQueryBuilder('me');
////            
////            $result = $qb->select('mu')
////            ->distinct()
////            ->from("RepSiteBundle:Musica", "mu")
////                    ->where('mu.id NOT IN (0)')
////                    //->andWhere('mu.status = 0')
////                    ->addOrderBy('mu.nome')
////            ->getQuery()
////            ->getResult();
//            return null;
//        }
        
        $sql = "SELECT m.* 
                FROM musica m LEFT JOIN
                     musica_projeto mp ON mp.id_musica = m.id
                WHERE mp.id_projeto = '".$id_projeto."'
                AND  mp.status IN (0,1)
                AND  m.id NOT IN (SELECT m.id FROM musica_evento me INNER JOIN 
                                                   musica m ON m.id = me.id_musica 
                                              WHERE me.id_evento = '".$id_evento."' AND me.status = 0)";
        
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(\PDO::FETCH_CLASS, "Rep\SiteBundle\Entity\Musica");
        
        return $result;
        
    }
    
    public function invalidaTodasMusicasEvento($id_evento){
        
        $qb = $this->createQueryBuilder('me')
                ->update("RepSiteBundle:MusicaEvento", 'me')
                ->set('me.status', 2)
                ->set('me.ultimaAlteracao', ':now')
                ->where('me.evento = :id_evento')
                ->andWhere('me.status != 2')
                ->setParameter('now', new \DateTime())
                ->setParameter('id_evento', $id_evento);

        $qb->getQuery()->getResult();
        
        return true;
        
    }
    
    public function listarTodasPorEvento($slug){
        $qb = $this->createQueryBuilder('me')
                ->select('m')
                ->leftJoin("RepSiteBundle:Musica", 'm', 'WITH', 'm.id = me.musica')
                ->leftJoin("RepSiteBundle:Evento", 'e', 'WITH', 'e.id = me.evento')
                ->andWhere('e.slug = :evento')
                ->andWhere('me.status = 0')
                ->setParameter(':evento', $slug)
                ->addOrderBy('me.ordem');

        return $qb->getQuery()->getResult();
    }
    
    public function contarTodasPorEvento($slug){
        $qb = $this->createQueryBuilder('me')
                ->select('count(me.id)')
                ->leftJoin("RepSiteBundle:Musica", 'm', 'WITH', 'm.id = me.musica')
                ->leftJoin("RepSiteBundle:Evento", 'e', 'WITH', 'e.id = me.evento')
                ->andWhere('e.slug = :evento')
                ->andWhere('me.status = 0')
                ->setParameter(':evento', $slug)
                ->addOrderBy('me.ordem');

        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function listarTodosREST($limite = null, $dataUltimoAcesso){
        $qb = $this->createQueryBuilder('me')
                ->select('me.id', 'me.observacao', 'm.id AS musica', 'e.id AS evento', 'me.status', 
                        'me.ultimaAlteracao AS ultima_alteracao', 'me.ordem')
                ->distinct()
                ->leftJoin("RepSiteBundle:Musica", "m", "WITH", "m.id = me.musica")
                ->leftJoin("RepSiteBundle:Evento", "e", "WITH", "e.id = me.evento")
                ->where("me.ultimaAlteracao > :ultimaAlteracao")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->addOrderBy('me.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
}
